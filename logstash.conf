########### PRODUCTION LOGSTASH CONF ############
# Create the Elasticsearch indexes and load     #
# data from PostgreSQL database.                #
#################################################

input {
  jdbc { 
    jdbc_connection_string => "${JDBC_POSTGRESQL}"
    # The user we wish to execute our statement as
    jdbc_user => "${JDBC_USER}"
    jdbc_password => "${JDBC_PASSWORD}"
    # The path to our downloaded jdbc driver
    jdbc_driver_library => "/config-dir/postgresql-connector.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    # our query
    statement => "
      SELECT  
        doc.*,
        date_part('year', doc.date_publication) as publication_year,
        t_description.title as title,
        t_description.body as description,
        string_agg(DISTINCT jds.code_subject, ', ' ORDER BY jds.code_subject) as subjects,
        lib.id as \"library id\",
        lib.name as \"library name\",
        editor.id as \"editor id\",
        editor.name as \"editor name\",
        string_agg(DISTINCT caver.nickname, '; ') as authors,
        string_agg(r.name, ', ') as regions,
        ty.id as \"type id\",
        ty.name as \"type name\"
      FROM t_document as doc
      LEFT JOIN j_document_subject jds ON jds.id_document = doc.id
      LEFT JOIN (
        SELECT g.id, n.name as name
        FROM t_grotto g
        LEFT JOIN t_name n ON g.id = n.id_grotto
        WHERE n.is_main = true
      ) lib ON lib.id = doc.id_library
      LEFT JOIN (
        SELECT g.id, n.name as name
        FROM t_grotto g
        LEFT JOIN t_name n ON g.id = n.id_grotto
        WHERE n.is_main = true
      ) editor ON editor.id = doc.id_editor
      LEFT JOIN j_document_caver_author jdca ON jdca.id_document = doc.id
      LEFT JOIN t_caver caver ON caver.id = jdca.id_caver
      LEFT JOIN t_description ON t_description.id_document = doc.id
      LEFT JOIN j_document_region jdcr ON jdcr.id_document = doc.id
      LEFT JOIN t_region r ON r.id = jdcr.id_region
      LEFT JOIN t_type ty ON ty.id = doc.id_type
      WHERE is_validated = true
      GROUP BY doc.id, t_description.id, lib.id, lib.name, editor.id, editor.name, ty.id, ty.name
    "
    type => "document"
  }
  jdbc { 
    jdbc_connection_string => "${JDBC_POSTGRESQL}"
    # The user we wish to execute our statement as
    jdbc_user => "${JDBC_USER}"
    jdbc_password => "${JDBC_PASSWORD}"
    # The path to our downloaded jdbc driver
    jdbc_driver_library => "/config-dir/postgresql-connector.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    # our query
    statement => "
      SELECT 
        e.*, 
        string_agg(DISTINCT n.name, ', ') AS names,
        string_agg(d.title || ' ' || d.body, ', ') AS descriptions,
        AVG(c.approach) AS approach,
        AVG(c.aestheticism) AS aestheticism,
        AVG(c.caving) AS caving,
        main_n.main_name AS name,
        cave_and_massif.name_cave AS \"cave name\",
        cave_and_massif.length_cave AS \"cave length\",
        cave_and_massif.depth_cave AS \"cave depth\",
        cave_and_massif.is_diving_cave AS \"cave is diving\",
        cave_and_massif.name_massif AS \"massif name\",
        country.native_name AS country,
        country.iso3 AS \"country code\"
      FROM t_entrance AS e
      LEFT JOIN t_name n ON n.id_entrance = e.id
      LEFT JOIN t_description d on d.id_entrance = e.id
      LEFT JOIN t_comment c on c.id_entrance = e.id
      LEFT JOIN (
        SELECT t_name.id_entrance AS id, t_name.name AS main_name
        FROM t_name
        WHERE t_name.is_main = true
      ) main_n ON main_n.id = e.id
      LEFT JOIN (
        SELECT 
          c.id AS id_cave, c.depth AS depth_cave, c.length AS length_cave, c.is_diving AS is_diving_cave,
          n1.name AS name_cave, n2.name AS name_massif
        FROM t_cave c
        LEFT JOIN t_name n1 ON n1.id_cave = c.id
        LEFT JOIN t_massif m ON m.id = c.id_massif
        LEFT JOIN t_name n2 ON n2.id_massif = m.id
        WHERE n1.is_main = true
        AND n2.is_main = true
      ) cave_and_massif ON cave_and_massif.id_cave = e.id_cave
      LEFT JOIN t_country country ON country.iso = e.id_country 
      GROUP BY e.id, main_n.main_name, cave_and_massif.name_cave, cave_and_massif.depth_cave, 
	  	  cave_and_massif.length_cave, cave_and_massif.is_diving_cave, cave_and_massif.name_massif, country.iso3, country.native_name
    "
    type => "entrance"
  }
  jdbc { 
    jdbc_connection_string => "${JDBC_POSTGRESQL}"
    # The user we wish to execute our statement as
    jdbc_user => "${JDBC_USER}"
    jdbc_password => "${JDBC_PASSWORD}"
    # The path to our downloaded jdbc driver
    jdbc_driver_library => "/config-dir/postgresql-connector.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    # our query
    statement => "
      SELECT
        m.*,
        string_agg(DISTINCT n.name, ', ') AS names,
        string_agg(d.title || ' ' || d.body, '## ') AS descriptions,
        COUNT(caves) AS \"nb caves\",
        SUM(caves.nb_entrances) AS \"nb entrances\",
        main_n.main_name AS name
      FROM t_massif AS m
      LEFT JOIN t_name n ON n.id_massif = m.id
      LEFT JOIN t_description d ON d.id_massif = m.id
      LEFT JOIN (
        SELECT t_name.id_massif AS id, t_name.name AS main_name
        FROM t_name
        WHERE t_name.is_main = true
      ) main_n ON main_n.id = m.id
      LEFT JOIN (
        SELECT c.id AS id, c.id_massif AS id_massif, COUNT(e) AS nb_entrances
        FROM t_cave c
        LEFT JOIN t_entrance e ON e.id_cave = c.id
        GROUP BY c.id
      ) caves ON caves.id_massif = m.id
      GROUP BY m.id, main_n.main_name
    "
    type => "massif"
  }
  jdbc { 
    jdbc_connection_string => "${JDBC_POSTGRESQL}"
    # The user we wish to execute our statement as
    jdbc_user => "${JDBC_USER}"
    jdbc_password => "${JDBC_PASSWORD}"
    # The path to our downloaded jdbc driver
    jdbc_driver_library => "/config-dir/postgresql-connector.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    # our query
    statement => "
      SELECT
        g.*,
        string_agg(DISTINCT n.name, ', ') AS names,
        COUNT(jgc.id_caver) AS \"nb cavers\",
        main_n.main_name AS name,
        c.iso3 AS \"country code\",
        c.native_name AS country
      FROM t_grotto AS g
      LEFT JOIN t_name n ON n.id_grotto = g.id
      LEFT JOIN j_grotto_caver jgc ON jgc.id_grotto = g.id
      LEFT JOIN (
        SELECT t_name.id_grotto AS id, t_name.name AS main_name
        FROM t_name
        WHERE t_name.is_main = true
      ) main_n ON main_n.id = g.id
      LEFT JOIN t_country c ON c.iso = g.id_country
      GROUP BY g.id, main_n.main_name, c.iso3, c.native_name 
    "
    type => "grotto"
  }
  jdbc { 
    jdbc_connection_string => "${JDBC_POSTGRESQL}"
    # The user we wish to execute our statement as
    jdbc_user => "${JDBC_USER}"
    jdbc_password => "${JDBC_PASSWORD}"
    # The path to our downloaded jdbc driver
    jdbc_driver_library => "/config-dir/postgresql-connector.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    # our query
    statement => "
      SELECT 
        c.id,
        c.name, 
        c.surname,
        c.nickname,
        c.mail,
        string_agg(jcg.id_group::text, ',') as groups
      FROM t_caver AS c
      LEFT JOIN j_caver_group jcg ON jcg.id_caver = c.id
      WHERE c.banned = false
      GROUP BY c.id
    "
    type => "caver"
  }
}
output {
  # debugging purpose
  # stdout { codec => json_lines }
  if [type] == "entrance" {
    elasticsearch {
      hosts => "${ES_HOSTS}"
      index => "entrances-index"
      document_type => "data"
      action => "update"
      document_id => "%{id}"
      doc_as_upsert => true
    }
  }

  if [type] == "massif" {
    elasticsearch {
      hosts => "${ES_HOSTS}"
      index => "massifs-index"
      document_type => "data"
      action => "update"
      document_id => "%{id}"
      doc_as_upsert => true
    }
  }

  if [type] == "grotto" {
    elasticsearch {
      hosts => "${ES_HOSTS}"
      index => "grottos-index"
      document_type => "data"
      action => "update"
      document_id => "%{id}"
      doc_as_upsert => true
    }
  }

  if [type] == "document" {
    elasticsearch {
      hosts => "${ES_HOSTS}"
      index => "documents-index"
      document_type => "data"
      action => "update"
      document_id => "%{id}"
      doc_as_upsert => true
    }
  }

  if [type] == "caver" {
    elasticsearch {
      hosts => "${ES_HOSTS}"
      index => "cavers-index"
      document_type => "data"
      action => "update"
      document_id => "%{id}"
      doc_as_upsert => true
    }
  }
}