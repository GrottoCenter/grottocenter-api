name: Build test deploy
on: [push]
jobs:
  # ===== Build & test API
  build-test-deploy:
    environment: build
    runs-on: ubuntu-latest

    # PostGreSQL test database init
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: root
          POSTGRES_DB: grottoce
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '16.14.2'
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - run: npm ci

      # ===== Test
      - run: npm test
      - run: npm run-script coverage
      - run: npm run-script coveralls
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
          COVERALLS_SERVICE_NAME: 'Github Actions'
          COVERALLS_GIT_BRANCH: ${{ github.ref }}

      # ===== Create .tar and send it to AWS S3 if on branch master
      - name: Create artefact latest.tar.gz file
        if: github.ref == 'refs/heads/master'
        run: |
          mkdir artefact
          tar --exclude-vcs --exclude=./artefact -czf artefact/latest.tar.gz .
      - name: store artifact for 1 day in github
        if: github.ref == 'refs/heads/master'
        uses: actions/upload-artifact@v2
        with:
          name: latest.tar.gz
          path: artefact/latest.tar.gz
          retention-days: 1
      - name: Configure AWS credentials
        if: github.ref == 'refs/heads/master'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
      - name: Copy latest.tar.gz to S3
        if: github.ref == 'refs/heads/master'
        run: aws s3 cp ./artefact/latest.tar.gz s3://appgrottocenter3
