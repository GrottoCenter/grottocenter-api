openapi: '3.0.0'

info:
  description: "This page documents the available Grottocenter's API."
  title: 'Grottocenter 3 - REST API'
  version: 'v.1'
  termsOfService: 'https://wiki.grottocenter.org/wiki/GrottoCenter:En/API'
  contact:
    name: 'Slack space'
    url: 'https://grottocenter.slack.com/messages/C858CHARY/'
  license:
    name: 'CC BY-SA 3.0'
    url: 'https://creativecommons.org/licenses/by-sa/3.0/'

servers:
- url: http://beta.grottocenter.org/api/v1
- url: https://beta.grottocenter.org/api/v1

tags:
- name: authentication
- name: cavers
- name: documents
- name: entrances
- name: geoloc
- name: groups
- name: identifierTypes
- name: languages
- name: massifs
- name: organizations
- name: regions
- name: search
- name: subjects

paths:
  '/cavers/{caverId}/groups/{groupId}':
    put:
      tags:
      - cavers
      - groups
      description: Add a caver to a group.
      parameters:
      - name: caverId
        in: path
        description: Caver id to be added to the group.
        required: true
        schema:
          type: string
      - name: groupId
        in: path
        description: Group id to add the caver to.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
        '400':
          description: "Bad request. Either the caverId and groupId parameters should exist in the database. Also, you can't add a caver if he / she is already in the group you specified."
        '500':
          description: Internal error

    delete:
      tags:
      - cavers
      - groups
      description: Add a caver to a group.
      parameters:
      - name: caverId
        in: path
        description: Caver id to be removed from the group.
        required: true
        schema:
          type: string
      - name: groupId
        in: path
        description: Group id to remove the caver from.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
        '400':
          description: "Bad request. Either the caverId and groupId parameters should exist in the database."
        '500':
          description: Internal error
  

  '/documents/identifierTypes':
    get:
      tags:
      - documents
      - identifierTypes
      description: Get all the document identifier types.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifierTypes:
                    type: array
                    items:
                      $ref: "#/components/schemas/Document-identifierType"
        '500':
          description: Internal error
    

  '/regions/search/logical/or':
    post:
      tags:
      - regions
      description: Get a region according to the parameters given, applying a logical OR. The search is case insensitive and autocompleted (i.e. it search for the parameters being contained in the actual field).
      parameters:
      - name: name
        in: query
        description: Region name (case insensitive)
        required: false
        schema:
          type: string
      - name: code
        in: query
        description: Region code (case insensitive)
        required: false
        schema:
          type: string
      - name: isDeprecated
        in: query
        description: Region deprecated or not (currently, the deprecated ones are the ones from the BBS)
        required: false
        schema:
          type: boolean
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  regions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Region'
        '500':
          description: Internal error

  '/languages':
    get:
      tags:
        - languages
      description: Get all languages supported by Grottocenter.
      parameters:
      - name: isPrefered
        in: query
        description: Languages prefered or not.
        required: false
        schema:
          type: boolean
          default: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Language-list'
    
  '/languages/{id}':
    get:
      tags:
        - languages
      description: Get a language by its id.
      parameters:
        - name: id
          in: path
          description: id of the language (generally, three letters)
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Language'
    

  '/auth/login':
    post:
      tags:
        - authentication
      description: Login to Grottocenter
      parameters:
        - name: email
          in: query
          description: Email of the account you want to connect to
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Password of the account you want to connect to
          required: true
          schema:
            type: string
      responses: 
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Auth-success"
        
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  '/documents/subjects':
    get:
      tags:
      - documents
      - subjects
      description: Get all the document subjects.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  subjects:
                    type: array
                    items:
                      $ref: "#/components/schemas/Document-subject"
        '500':
          description: Internal error

  '/documents/subjects/{code}':
    get:
      tags:
      - documents
      - subjects
      description: Get a subject by its code.
      parameters:
      - name: code
        in: path
        description: Subject code
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document-subject'
        '404':
          description: Subject not found
        '500':
          description: Internal error
  
  '/documents/subjects/search/logical/or':
    post:
      tags:
      - documents
      - subjects
      description: Get a subject according to the parameters given, applying a logical OR. The search is case insensitive and autocompleted (i.e. it search for the parameters being contained in the actual field).
      parameters:
      - name: name
        in: query
        description: Subject name (case insensitive)
        required: false
        schema:
          type: string
      - name: code
        in: query
        description: Subject code (case insensitive)
        required: false
        schema:
          type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  subjects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Document-subject'
        '500':
          description: Internal error

  '/entrances/{id}':
    get:
      tags:
      - entrances
      description: Get a public entry by ID
      parameters:
      - name: id
        in: path
        description: Entrance ID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entrance'
        '404':
          description: Resource not found
        '500':
          description: Internal error

  '/entrances/publicCount':
    get:
      tags:
      - entrances
      deprecated: false
      description: Get the number of public entrances referenced in GC3 database
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Count'
        '500':
          description: Internal error
  
  '/entrances/count':
    get:
      tags:
      - entrances
      deprecated: false
      description: Get the number of entrances referenced in GC3 database
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Count'
        '500':
          description: Internal error
          
  '/search':
    post:
      tags:
      - search
      summary: Search for resources (cavers, documents, entrances, massifs & organizations)
      description: Search for resources (cavers, documents, entrances, massifs & organizations). Case insensitive. Search over a lots of resource properties (not only name).
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - query
              properties:
                query:
                  type: string
                  description: Resource property (or part of property) to search.
                resourceTypes:
                  type: array
                  description: Resource types to search on. If not specified, it will search on all resources.
                  items:
                    $ref: '#/components/schemas/Search-type'
                complete:
                  type: boolean
                  description: Does the query need to send every information about the results? If it's set to false, the id and the name of each result only will be returned.

                
                
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Search'
        '404':
          description: Resource not found
        '500':
          description: Internal error
  
  '/advanced-search':
    post:
      tags:
      - search
      summary: Advanced search for resources (documents, entrances, massifs & organizations)
      description: Search for resources (entrances, massifs, organizations & documents) in the criterias mentionned in the request. It's case insensitive.
      parameters:
      - name: query
        in: query
        description: Resource property (or part of property)
        required: true
        schema:
          type: string
      - name: resourceType
        in: query
        description: Resource type to be searched
        required: true
        schema:
          type: string
          enum: [documents, entrances, massifs, organizations]
      - name: complete
        in: query
        description: Does the query need to send every information about the results? If it's set to false, the id and the name of each result will be returned.
        required: false
        schema:
          type: boolean
          default: true
      - name: paramX
        in: query
        description: String property of the resource you want to search on. The resource property will be matched exactly (no auto-complete, no fuzziness etc.). You can specify as much properties as you want.
        required: false
        schema:
          type: string
      - name: paramY-min
        in: query
        description: Range number property of the resource you want to search on. The resource property will be superior or equal to this value. You can specify as much properties as you want.
        required: false
        schema:
          type: number
      - name: paramY-max
        in: query
        description: Range number property of the resource you want to search on. The resource property will be inferior or equal to this value. You can specify as much properties as you want.
        required: false
        schema:
          type: number
      - name: paramZ-bool
        in: query
        description: Boolean property of the resource you want to search on. You can specify as much properties as you want.
        required: false
        schema:
          type: boolean
          default: true
          
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Search'
        '404':
          description: Resource not found
        '500':
          description: Internal error

  '/geoloc/countEntries':
    get:
      tags:
      - geoloc
      description: Count entries contained inside the given coords
      parameters:
      - name: sw_lat
        in: query
        description: South West latitude
        required: true
        schema:
          type: string
      - name: sw_lng
        in: query
        description: South West longitude
        required: true
        schema:
          type: string
      - name: ne_lat
        in: query
        description: North East latitude
        required: true
        schema:
          type: string
      - name: ne_lng
        in: query
        description: North East longitude
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Count'
        '404':
          description: Resource not found
        '500':
          description: Internal error

  '/geoloc/findByBounds':
    get:
      tags:
      - geoloc
      description: Find entries contained inside the given coords
      parameters:
      - name: sw_lat
        in: query
        description: South West latitude
        required: true
        schema:
          type: string
      - name: sw_lng
        in: query
        description: South West longitude
        required: true
        schema:
          type: string
      - name: ne_lat
        in: query
        description: North East latitude
        required: true
        schema:
          type: string
      - name: ne_lng
        in: query
        description: North East longitude
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Geoloc'
        '404':
          description: Resource not found
        '500':
          description: Internal error
  '/massifs/{id}':
    get:
      tags:
      - massifs
      description: Get a massif, its author and all its caves
      parameters:
      - name: id
        in: path
        description: Massif ID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Massif"
        '404':
          description: Resource not found
        '500':
          description: Internal error

  '/organizations/{id}':
    get:
      tags:
      - organizations
      description: Get an organization (speleo club, association, library, editor etc.).
      parameters:
      - name: id
        in: path
        description: Organization ID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Organization"
        '404':
          description: Resource not found
        '500':
          description: Internal error
  
  '/organizations/count':
    get:
      tags:
      - organizations
      deprecated: false
      description: Get the number of organizations referenced in GC3 database
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Count'
        '500':
          description: Internal error

components:
  schemas:

    Auth-success: 
      type: object
      properties:
        token:
          type: string
    
    Cave:
      type: object
      properties:
        id: 
          type: integer
          format: int64
        locked: 
          type: boolean
        idReviewer: 
          type: integer
          format: int64
        idLocker: 
          type: integer
          format: int64
        name: 
          type: string
        minDepth: 
          type: integer
          format: int64
        maxDepth: 
          type: integer
          format: int64
        depth: 
          type: integer
          format: int64
        length: 
          type: integer
          format: int64
        isDiving: 
          type: boolean
        temperature: 
          type: integer
          format: int64
        dateInscription: 
          type: string
        dateReviewed: 
          type: string
        dateLocked: 
          type: string
        author: 
          type: integer
          format: int64

    Caver:
      type: object
      properties:
        id: 
          type: integer
          format: int64
        nickname: 
          type: string
    
    Comment:
      type: object
      properties:
        id: 
          type: integer
        dateInscription:
          type: string
        dateReviewed:
          type: string
        author:
          $ref: '#/components/schemas/Caver'
        reviewer:
          $ref: '#/components/schemas/Caver'
        relevance:
          type: number
        eTUnderground:
          type: object
        eTTrail:
          type: object
        aestheticism:
          type: number
        caving:
          type: number
        approach:
          type: number
        title:
          type: string
        body:
          type: string
        alert:
          type: boolean
        cave:
          $ref: '#/components/schemas/Cave'
        entrance:
          $ref: '#/components/schemas/Entrance'
        exit:
          $ref: '#/components/schemas/Entrance'
        language:
          type: string
        
          
    Count:
      type: object
      properties:
        count:
          type: integer
          format: int64
    
    Document:
      type: object
      properties:
        id: 
          type: integer
        dateInscription:
          type: string
        dateReviewed:
          type: string
        author:
          $ref: '#/components/schemas/Caver'
        reviewer:
          $ref: '#/components/schemas/Caver'
        isValidated:
          type: boolean
        validationComment:
          type: string
        pages:
          type: string
        identifier:
          type: object
        refBbs:
          type: string
        pathOld:
          type: string
        pagesBBSOld:
          type: string
        commentsBBSOld:
          type: string
        publicationOtherBBSOld:
          type: string
        publicationFasciculeBBSOld:
          type: string
        validator:
          type: object
        identifierType:
          type: object
        entrance:
          $ref: '#/components/schemas/Entrance'
        massif:
          $ref: '#/components/schemas/Massif'
        cave:
          $ref: '#/components/schemas/Cave'
        editor:
          $ref: '#/components/schemas/Organization'
        library:
          $ref: '#/components/schemas/Organization'
        parent:
          $ref: '#/components/schemas/Document'
    
    Document-identifierType:
      type: object
      properties:
        code: 
          type: string
        text: 
          type: string
        regexp: 
          type: string
    
    Document-subject:
      type: object
      properties:
        code: 
          type: string
        subject: 
          type: string
        parent: 
          type: string

    Entrance:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        names:
          type: array
          items:
            $ref: '#/components/schemas/Name'
        descriptions:
          type: array
          items:
            type: string
        city:
          type: string
        county:
          type: string
        region:
          type: string
        country:
          type: string
        latitude:
          type: number
        longitude:
          type: number
        stats: 
          $ref: '#/components/schemas/Entrance-stats'
        cave: 
          $ref: '#/components/schemas/Cave'
        documents:
          type: array
          items:
            $ref: '#/components/schemas/Document'
        locations:
          type: array
          items:
            $ref: '#/components/schemas/Location'
        riggings:
          type: array
          items:
            $ref: '#/components/schemas/Rigging'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'

    Entrance-list:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        latitude:
          type: number
        longitude:
          type: number
    
    Entrance-stats:
      type: object
      properties:
        aestheticism:
          type: number
          format: float
        caving:
          type: number
          format: float
        approach:
          type: number
          format: float
    
    Geoloc:
      properties:
        entries:
          type: array
          items:
            anyOf:
            - $ref: '#/components/schemas/Entrance'
            - $ref: '#/components/schemas/Entrance-list'
    
    Language:
      properties:
        id:
          type: string
        part2b:
          type: string
        part2t:
          type: string
        part1:
          type: string
        scope:
          type: string
        type:
          type: string
        ref_name:
          type: string
        comment:
          type: string
        
    Language-list:
      properties:
        languages:
          type: array
          items:
            $ref: '#/components/schemas/Language'
    
    Location:
      type: object
        
    Massif:
      type: object
      properties:
        id:
          type: integer
          format: int64
        author: 
          $ref: '#/components/schemas/Caver'
        reviewer:
          $ref: '#/components/schemas/Caver'
        name:
          type: string
        dateInscription:
          type: string
        dateReviewed:
          type: string
        caves:
          type: array
          items: 
            $ref: '#/components/schemas/Cave'
       
    Name:
      properties:
        id: 
          type: integer
        name:
          type: string
        isMain:
          type: boolean
        dateInscription:
          type: string
        dateReviewed:
          type: string
        author:
          $ref: '#/components/schemas/Caver'
        reviewer:
          $ref: '#/components/schemas/Caver'
        language:
          type: string
        entrance:
          $ref: '#/components/schemas/Entrance'
        cave:
          $ref: '#/components/schemas/Cave'
        point:
          type: object
        massif:
          $ref: '#/components/schemas/Massif'
        organization:
          $ref: '#/components/schemas/Organization'
  
    Organization:
      type: object
      properties:
        id: 
          type: integer
          format: int64
        author: 
          $ref: '#/components/schemas/Caver'
        reviewer: 
          $ref: '#/components/schemas/Caver'
        name: 
          type: 'string'
        address:
          type: 'string'
        city: 
          type: 'string'
        village:
          type: 'string'
        postalCode:
          type: 'string'
        county:
          type: 'string'
        region: 
          type: 'string'
        country:
          type: 'string'
        mail:
          type: 'string'
        yearBirth:
          type: 'string'
        dateInscription: 
          type: 'string'
        dateReviewed: 
          type: 'string'
        latitude: 
          type: number
        longitude: 
          type: number
        customMessage: 
          type: 'string'
        pictureFileName: 
          type: 'string'
        isOfficialPartner: 
          type: 'boolean'
        cavers: 
          type: array
          items: 
            $ref: '#/components/schemas/Caver'
        exploredCaves: 
          type: array
          items: 
            $ref: '#/components/schemas/Cave'
        partneredCaves: 
          type: array
          items: 
            $ref: '#/components/schemas/Cave'
    
    Point:
      type: object
    
    Rigging:
      type: object
      properties:
        id: 
          type: integer
        name:
          type: string
        dateInscription:
          type: string
        dateReviewed:
          type: string
        author:
          $ref: '#/components/schemas/Caver'
        reviewer:
          $ref: '#/components/schemas/Caver'
        relevance:
          type: number
        title:
          type: string
        obstacles: 
          type: string
        ropes:
          type: string
        anchors: 
          type: string
        observations:
          type: string
        exit:
          $ref: '#/components/schemas/Entrance'
        point:
          $ref: '#/components/schemas/Point'
        language:
          type: string
          
    Region:
      properties:
        id: 
          type: integer
        name:
          type: string
        code:
          type: string
        isDeprecated:
          type: boolean
        country:
          type: string

    Search:
      properties:
        results:
          type: array
          items: 
            oneOf:
              - $ref: '#/components/schemas/Entrance'
              - $ref: '#/components/schemas/Massif'
              - $ref: '#/components/schemas/Organization'
    
    Search-type:
      type: string
      enum:
        - cavers
        - documents
        - entrances
        - grottos
        - massifs
