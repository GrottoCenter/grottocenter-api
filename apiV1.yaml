openapi: '3.0.0'

info:
  description: "This page documents the available Grottocenter's API."
  title: 'Grottocenter 3 - REST API'
  version: 'v.1'
  termsOfService: 'https://wiki.grottocenter.org/wiki/GrottoCenter:En/API'
  contact:
    name: 'Slack space'
    url: 'https://grottocenter.slack.com/messages/C858CHARY/'
  license:
    name: 'CC BY-SA 3.0'
    url: 'https://creativecommons.org/licenses/by-sa/3.0/'

servers:
- url: http://beta.grottocenter.org/api/v1
- url: https://beta.grottocenter.org/api/v1

tags:
- name: authentication
- name: caves
- name: cavers
- name: documents
- name: entrances
- name: geoloc
- name: groups
- name: identifierTypes
- name: languages
- name: massifs
- name: organizations
- name: regions
- name: search
- name: subjects

paths:
  '/caves/{id}':
    get:
      tags:
      - caves
      description: Get a cave by id.
      parameters:
      - name: id
        in: path
        description: Cave id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cave'
        '404':
          description: Cave not found.
          
  '/cavers':
    post:
      tags:
      - cavers
      description: Create a caver (currently using only a name & surname)
      parameters:
      - name: name
        in: query
        description: Caver name
        required: true
        schema:
          type: string
      - name: surname
        in: query
        description: Caver surname
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Caver"
        '400':
          description: You must provide a surname and a name to create a new caver.
        '403':
          description: You are not authorized to create a caver.

  '/cavers/admins':
    get:
      tags:
      - cavers
      description: Get all the administrators of Grottocenter.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  cavers:
                    type: array
                    items:
                      $ref: "#/components/schemas/Caver"
        '404':
          description: No administrators found.
  
  '/cavers/count':
    get:
      tags:
      - cavers
      description: Get the number of cavers (both users and document authors) of the application
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Count'
  
  '/cavers/moderators':
    get:
      tags:
      - cavers
      description: Get all the moderators of Grottocenter.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  cavers:
                    type: array
                    items:
                      $ref: "#/components/schemas/Caver"
        '404':
          description: No moderators found.
  
  '/cavers/{caverId}/groups':
    post:
      tags:
      - cavers
      - groups
      description: Set caver groups.
      parameters:
      - name: caverId
        in: path
        description: Caver id whose groups you want to define.
        required: true
        schema:
          type: string
      - name: groups
        in: query
        description: Group ids to set for the caver.
        required: true
        schema:
          type: array
          items: 
            type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: Bad request, could not find caver with the caver id you provided or could not find one or multiple groups with group ids you provided.
        '403':
          description: You are not authorized to set caver groups.

  '/cavers/{caverId}/groups/{groupId}':
    put:
      tags:
      - cavers
      - groups
      description: Add a caver to a group.
      parameters:
      - name: caverId
        in: path
        description: Caver id to be added to the group.
        required: true
        schema:
          type: string
      - name: groupId
        in: path
        description: Group id to add the caver to.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
        '400':
          description: "Bad request. Both the caverId and groupId parameters must exist in the database. Also, you can't add a caver if he / she is already in the group you specified."
        '403':
          description: You are not authorized to add a caver to a group.

    delete:
      tags:
      - cavers
      - groups
      description: Remove a caver from a group.
      parameters:
      - name: caverId
        in: path
        description: Caver id to be removed from the group.
        required: true
        schema:
          type: string
      - name: groupId
        in: path
        description: Group id to remove the caver from.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: Bad request. Both the caverId and groupId parameters must exist in the database.
        '403':
          description: You are not authorized to remove a caver from a group.

  '/documents/{id}':
    get:
      tags:
      - documents
      description: Get a document by id.
      parameters:
      - name: id
        in: path
        description: Document id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '404':
          description: Document not found.

    put:
      tags:
        - documents
      description: Update a document. See the POST /documents route explaination about the parameters you can use to update a document.
      parameters:
      - name: id
        in: path
        description: id of the document to be updated.
        required: true
        schema:
          type: string
      responses: 
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        403:
          description: You are not authorized to update a document.

  '/documents':
    post:
      tags:
        - documents
      description: "Create a document. When submitting a new document, you must provide an authentification token (from the /login route) in the Authorization header. This token will be used to set the author of the submission. A lot of parameters are required but it depends a lot on the document type you are submitting (example: there is no publication date for a Collection but it's mandatory for an Issue."
      parameters:
      - name: authors
        in: query
        description: Author(s) id(s) of the document, the one(s) who wrote it.
        schema:
          type: array
          items:
            type: object
            properties:
              id: 
                type: string

      - name: datePublication
        in: query
        description: Date on which the document you submit was made public. You can refer to the date indicated on the document.
        schema:
          type: string
        examples:
          year:
            value: '2014'
            summary: Year only
          year and month:
            value: '2014-06'
            summary: Year and month
          full date:
            value: '2014-06-21'
            summary: Full date

      - name: editor
        in: query
        description: Organization that ensures the publication of the document.
        schema:
          type: object
          properties:
            id:
              type: string
              
      - name: identifier
        in: query
        description: Code for designating a document in a unique way. This can be a DOI, URL, ISBN or ISSN.
        schema:
          type: string

      - name: identifierType
        in: query
        description: Type of the identifier provided.
        schema:
          type: object
          properties:
            id:
              type: string
              enum: ['DOI', 'ISBN', 'ISSN', 'URL']
      
      - name: library
        in: query
        description: Place (= Organization) where the document can be consulted.
        schema:
          type: object
          properties:
            id:
              type: string
      
      - name: massif
        in: query
        description: Massif to which the document refers to.
        schema:
          type: object
          properties:
            id:
              type: string
      
      - name: partOf
        in: query
        description: Document that contains the document you are submitting (an article has a periodical issue as its parent document, a periodical issue has a periodical as its parent document).
        schema:
          type: object
          properties:
            id:
              type: string
      
      - name: regions
        in: query
        description: BBS regions to which the document refers to.
        schema:
          type: array
          items:
            type: object
            properties:
              id: 
                type: string
      
      - name: subjects
        in: query
        description: List of subjects and their description is available using the /documents/subjects route or here => https://www.ssslib.ch/bbs/wp-content/uploads/2017/03/chapter_and_geo_1_2008.pdf
        schema:
          type: array
          items:
            type: object
            properties:
              code: 
                type: string
      
      - name: documentType
        in: query
        description: Type of the document (Collection, Issue, Article or Text).
        schema:
          type: array
          items:
            type: object
            properties:
              id: 
                type: string
                
      - name: description
        in: query
        description: Precise sentence pleasant to read with keywords.
        schema:
          type: string
      
      - name: title
        in: query
        description: Title of the text as it is. In its absence, put a fictitious title between [].
        schema:
          type: string
      
      - name: titleAndDescriptionLanguage
        in: query
        description: Language used for the title and the description you are providing. List of languages supported by Grottocenter is available using the /languages route.
        schema:
          type: array
          items:
            type: object
            properties:
              id: 
                type: string
      
      - name: documentMainLanguage
        in: query
        description: Language used in the document. List of languages supported by Grottocenter is available using the /languages route.
        schema:
          type: array
          items:
            type: object
            properties:
              id: 
                type: string
  
      responses: 
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        403:
          description: You are not authorized to create a document.
     
    get:
      tags:
        - documents
      description: Get all documents.
      parameters:
      - name: isValidated
        in: query
        description: If the documents must be validated or not.
        required: false
        schema:
          default: true
          type: boolean
      - name: skip
        in: query
        description: Number of documents to skip.
        required: false
        schema:
          type: integer
          default: 0
      - name: limit
        in: query
        description: Maximum number of documents.
        required: false
        schema:
          type: integer
          default: 50
      - name: sortBy
        in: query
        description: Attribute to sort the documents by.
        required: false
        schema:
          type: string
          default: dateInscription
      - name: orderBy
        in: query
        description: Order used by the sortBy attribute
        required: false
        schema:
          type: string
          enum: [ASC, DESC]
          default: ASC
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  documents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Document'
  
  '/documents/count':
    get:
      tags:
      - entrances
      description: Get the number of documents.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Count'

  '/documents/{id}/validate':
    put:
      tags:
      - documents
      description: Validate or not a document, with or without a comment.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: isValidated
          in: query
          required: false
          description: Specify if the document is validated or refused.
          schema:
            type: boolean
            default: true
        - name: validationComment
          in: query
          description: Comment about why the document has been validated or refused. Mandatory when isValidated param is false.
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
        '400':
          description: Bad request. If you are refusing a document, you must provide a validationComment.
        '404':
          description: Document to update not found.

  '/documents/validate':
    put:
      tags:
      - documents
      description: Validate or not multiple documents, with or without a comment.
      parameters:
        - name: documents
          description: Document(s) to validate / refuse with their optionnal validation comment.
          in: query
          required: true
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: number
                isValidated:
                  type: boolean
                validationComment:
                  type: string

      responses:
        '200':
          description: Successful operation
        '404':
          description: Document(s) to update not found.
        '400':
          description: Bad request. If you are refusing a document, you must provide a validationComment.

  '/documents/identifierTypes':
    get:
      tags:
      - documents
      - identifierTypes
      description: Get all the document identifier types.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifierTypes:
                    type: array
                    items:
                      $ref: "#/components/schemas/Document-identifierType"


  '/regions/search/logical/or':
    post:
      tags:
      - regions
      description: Get a region according to the parameters given, applying a logical OR. The search is case insensitive and autocompleted (i.e. it search for the parameters being contained in the actual field).
      parameters:
      - name: name
        in: query
        description: Region name (case insensitive)
        required: false
        schema:
          type: string
      - name: code
        in: query
        description: Region code (case insensitive)
        required: false
        schema:
          type: string
      - name: isDeprecated
        in: query
        description: Region deprecated or not (currently, the deprecated ones are the ones from the BBS)
        required: false
        schema:
          type: boolean
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  regions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Region'

  '/languages':
    get:
      tags:
        - languages
      description: Get all languages supported by Grottocenter.
      parameters:
      - name: isPrefered
        in: query
        description: Languages prefered or not.
        required: false
        schema:
          type: boolean
          default: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Language-list'

  '/languages/{id}':
    get:
      tags:
        - languages
      description: Get a language by its id.
      parameters:
        - name: id
          in: path
          description: id of the language (generally, three letters)
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Language'


  '/login':
    post:
      tags:
        - authentication
      description: Login to Grottocenter
      parameters:
        - name: email
          in: query
          description: Email of the account you want to connect to
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Password of the account you want to connect to
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Auth-success"

        '401':
          description: Invalid email or password.
  
  '/signup':
    post:
      tags:
        - authentication
      description: Create an account on Grottocenter
      parameters:
        - name: email
          in: query
          description: Email of the account
          required: true
          schema:
            type: string
        - name: nickname
          in: query
          description: Nickname (how the user is displayed in the application)
          required: true
          schema:
            type: string
        - name: name
          in: query
          description: Real name of the user
          required: false
          schema:
            type: string
        - name: surname
          in: query
          description: Real surname of the user
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: Password of the account
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful sign up.

        '400':
          description: Bad request (password too short, missing value(s)...).
        
        '409':
          description: Email or nickname already used.

  '/documents/subjects':
    get:
      tags:
      - documents
      - subjects
      description: Get all the document subjects.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  subjects:
                    type: array
                    items:
                      $ref: "#/components/schemas/Document-subject"

  '/documents/subjects/{code}':
    get:
      tags:
      - documents
      - subjects
      description: Get a subject by its code.
      parameters:
      - name: code
        in: path
        description: Subject code
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document-subject'
        '404':
          description: Subject not found

  '/documents/subjects/search/logical/or':
    post:
      tags:
      - documents
      - subjects
      description: Get a subject according to the parameters given, applying a logical OR. The search is case insensitive and autocompleted (i.e. it search for the parameters being contained in the actual field).
      parameters:
      - name: name
        in: query
        description: Subject name (case insensitive)
        required: false
        schema:
          type: string
      - name: code
        in: query
        description: Subject code (case insensitive)
        required: false
        schema:
          type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  subjects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Document-subject'
                      
  '/entrances/findRandom':
    get:
      tags:
      - entrances
      description: Get a random entrance.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entrance'

  '/entrances/{id}':
    get:
      tags:
      - entrances
      description: Get an entrance by id. If the entrance is sensitive (i.e. not public), the locations, logintude and latitude attributes are not returned.
      parameters:
      - name: id
        in: path
        description: Entrance id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entrance'
        '404':
          description: Entrance not found.

  '/entrances/publicCount':
    get:
      tags:
      - entrances
      description: Get the number of public entrances.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Count'
  
  '/entrances/count':
    get:
      tags:
      - entrances
      description: Get the number of entrances.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Count'

  '/search':
    post:
      tags:
      - search
      summary: Search for resources (cavers, documents, document collections, entrances, massifs & organizations)
      description: Search for resources (cavers, documents, document collections, entrances, massifs & organizations). Case insensitive. Search over a lots of resource properties (not only name).
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - query
              properties:
                query:
                  type: string
                  description: Resource property (or part of property) to search.
                resourceTypes:
                  type: array
                  description: Resource types to search on. If not specified, it will search on all resources except document-collections and document-issues (already indexed by documents index)
                  items:
                    $ref: '#/components/schemas/Quicksearch-type'
                complete:
                  type: boolean
                  description: Does the query need to send every information about the results? If it's set to false, the id and the name of each result only will be returned.

      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Search'
        '404':
          description: Resource not found

  '/advanced-search':
    post:
      tags:
      - search
      summary: Advanced search for resources (caves, documents, document-collections, document-issues, entrances, massifs & organizations).
      description: Search for resources (caves, documents, document-collections, document-issues, entrances, massifs, organizations) in the criterias mentionned in the request. It's case insensitive. In the following parameters, paramX, paramY or paramZ must be replaced by the name of the parameter you want to search on (for example, if you want to search on a document title, use title=your_query).
      parameters:
      - name: query
        in: query
        description: Resource property (or part of property)
        required: true
        schema:
          type: string
      - name: resourceType
        in: query
        description: Resource type to be searched
        required: true
        schema:
          type: string
          oneOf:
            - $ref: '#/components/schemas/Search-type'
      - name: complete
        in: query
        description: Does the query need to send every information about the results? If it's set to false, the id and the name of each result will be returned.
        required: false
        schema:
          type: boolean
          default: true
      - name: paramX
        in: query
        description: String property of the resource you want to search on. The resource property will be matched exactly (no auto-complete, no fuzziness etc.). You can specify as much properties as you want.
        required: false
        schema:
          type: string
      - name: paramY-min
        in: query
        description: Range number property of the resource you want to search on. The resource property will be superior or equal to this value. You can specify as much properties as you want.
        required: false
        schema:
          type: number
      - name: paramY-max
        in: query
        description: Range number property of the resource you want to search on. The resource property will be inferior or equal to this value. You can specify as much properties as you want.
        required: false
        schema:
          type: number
      - name: paramZ-bool
        in: query
        description: Boolean property of the resource you want to search on. You can specify as much properties as you want.
        required: false
        schema:
          type: boolean
          default: true

      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Search'
        '404':
          description: Resource not found
        
  '/geoloc/countEntries':
    get:
      tags:
      - geoloc
      description: Count entries contained inside the given coords
      parameters:
      - name: sw_lat
        in: query
        description: South West latitude
        required: true
        schema:
          type: string
      - name: sw_lng
        in: query
        description: South West longitude
        required: true
        schema:
          type: string
      - name: ne_lat
        in: query
        description: North East latitude
        required: true
        schema:
          type: string
      - name: ne_lng
        in: query
        description: North East longitude
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Count'
        '404':
          description: Resource not found
        


  '/geoloc/findByBounds':
    get:
      tags:
      - geoloc
      description: Find entries contained inside the given coords
      parameters:
      - name: sw_lat
        in: query
        description: South West latitude
        required: true
        schema:
          type: string
      - name: sw_lng
        in: query
        description: South West longitude
        required: true
        schema:
          type: string
      - name: ne_lat
        in: query
        description: North East latitude
        required: true
        schema:
          type: string
      - name: ne_lng
        in: query
        description: North East longitude
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Geoloc'
        '404':
          description: Resource not found
        


  '/massifs/{id}':
    get:
      tags:
      - massifs
      description: Get a massif, its authors, names, descriptions and caves.
      parameters:
      - name: id
        in: path
        description: Massif id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Massif"
        '404':
          description: Resource not found
        
  '/organizations':
    post:
      tags:
      - organizations
      description: Create an organization (currently using only a name).
      parameters:
      - name: name
        in: query
        description: Organization main name
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Organization"
        '403':
          description: You are not allowed to create an organization.
        

  '/organizations/{id}':
    get:
      tags:
      - organizations
      description: Get an organization (speleo club, association, library, editor etc.) by its id.
      parameters:
      - name: id
        in: path
        description: Organization id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Organization"
        '404':
          description: Resource not found

  '/organizations/count':
    get:
      tags:
      - organizations
      description: Get the number of organizations.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Count'
  
  '/organizations/officialCount':
    get:
      tags:
      - organizations
      description: Get the number of Grottocenter official partners.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Count'
                
  '/partners/findForCarousel':
    get:
      tags:
        - organizations
      description: "Get all Grottocenter's partners which can be displayed in a carousel: it must have a picture and a custom message."
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Language-list'

components:
  schemas:

    Auth-success:
      type: object
      properties:
        token:
          type: string

    Cave:
      type: object
      properties:
        id:
          type: integer
          format: int64
        locked:
          type: boolean
        idReviewer:
          type: integer
          format: int64
        idLocker:
          type: integer
          format: int64
        name:
          type: string
        minDepth:
          type: integer
          format: int64
        maxDepth:
          type: integer
          format: int64
        depth:
          type: integer
          format: int64
        length:
          type: integer
          format: int64
        isDiving:
          type: boolean
        temperature:
          type: integer
          format: int64
        dateInscription:
          type: string
        dateReviewed:
          type: string
        dateLocked:
          type: string
        author:
          type: integer
          format: int64

    Caver:
      type: object
      properties:
        '@context':
          type: string
        '@id':
          type: string
        '@type':
          type: string
        id:
          type: integer
          format: int64
        nickname:
          type: string
        surname:
          type: string
        name:
          type: string
        mail:
          type: string
        groups:
          type: array
          items: 
            type: string

    Comment:
      type: object
      properties:
        id:
          type: integer
        dateInscription:
          type: string
        dateReviewed:
          type: string
        author:
          $ref: '#/components/schemas/Caver'
        reviewer:
          $ref: '#/components/schemas/Caver'
        relevance:
          type: number
        eTUnderground:
          type: object
        eTTrail:
          type: object
        aestheticism:
          type: number
        caving:
          type: number
        approach:
          type: number
        title:
          type: string
        body:
          type: string
        alert:
          type: boolean
        cave:
          $ref: '#/components/schemas/Cave'
        entrance:
          $ref: '#/components/schemas/Entrance'
        exit:
          $ref: '#/components/schemas/Entrance'
        language:
          type: string


    Count:
      type: object
      properties:
        count:
          type: integer
          format: int64

    Document:
      type: object
      properties:
        id:
          type: integer
        dateInscription:
          type: string
        dateReviewed:
          type: string
        author:
          $ref: '#/components/schemas/Caver'
        reviewer:
          $ref: '#/components/schemas/Caver'
        isValidated:
          type: boolean
        validationComment:
          type: string
        pages:
          type: string
        identifier:
          type: object
        refBbs:
          type: string
        pathOld:
          type: string
        pagesBBSOld:
          type: string
        commentsBBSOld:
          type: string
        publicationOtherBBSOld:
          type: string
        publicationFasciculeBBSOld:
          type: string
        validator:
          type: object
        identifierType:
          type: object
        entrance:
          $ref: '#/components/schemas/Entrance'
        massif:
          $ref: '#/components/schemas/Massif'
        cave:
          $ref: '#/components/schemas/Cave'
        editor:
          $ref: '#/components/schemas/Organization'
        library:
          $ref: '#/components/schemas/Organization'
        parent:
          $ref: '#/components/schemas/Document'

    Document-identifierType:
      type: object
      properties:
        code:
          type: string
        text:
          type: string
        regexp:
          type: string

    Document-subject:
      type: object
      properties:
        code:
          type: string
        subject:
          type: string
        parent:
          type: string

    Entrance:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        names:
          type: array
          items:
            $ref: '#/components/schemas/Name'
        descriptions:
          type: array
          items:
            type: string
        city:
          type: string
        county:
          type: string
        region:
          type: string
        country:
          type: string
        latitude:
          type: number
        longitude:
          type: number
        stats:
          $ref: '#/components/schemas/Entrance-stats'
        cave:
          $ref: '#/components/schemas/Cave'
        documents:
          type: array
          items:
            $ref: '#/components/schemas/Document'
        locations:
          type: array
          items:
            $ref: '#/components/schemas/Location'
        riggings:
          type: array
          items:
            $ref: '#/components/schemas/Rigging'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'

    Entrance-list:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        latitude:
          type: number
        longitude:
          type: number

    Entrance-stats:
      type: object
      properties:
        aestheticism:
          type: number
          format: float
        caving:
          type: number
          format: float
        approach:
          type: number
          format: float

    Geoloc:
      properties:
        entries:
          type: array
          items:
            anyOf:
            - $ref: '#/components/schemas/Entrance'
            - $ref: '#/components/schemas/Entrance-list'

    Language:
      properties:
        id:
          type: string
        part2b:
          type: string
        part2t:
          type: string
        part1:
          type: string
        scope:
          type: string
        type:
          type: string
        ref_name:
          type: string
        comment:
          type: string

    Language-list:
      properties:
        languages:
          type: array
          items:
            $ref: '#/components/schemas/Language'

    Location:
      type: object

    Massif:
      type: object
      properties:
        id:
          type: integer
          format: int64
        author:
          $ref: '#/components/schemas/Caver'
        reviewer:
          $ref: '#/components/schemas/Caver'
        name:
          type: string
        dateInscription:
          type: string
        dateReviewed:
          type: string
        caves:
          type: array
          items:
            $ref: '#/components/schemas/Cave'

    Name:
      properties:
        id:
          type: integer
        name:
          type: string
        isMain:
          type: boolean
        dateInscription:
          type: string
        dateReviewed:
          type: string
        author:
          $ref: '#/components/schemas/Caver'
        reviewer:
          $ref: '#/components/schemas/Caver'
        language:
          type: string
        entrance:
          $ref: '#/components/schemas/Entrance'
        cave:
          $ref: '#/components/schemas/Cave'
        point:
          type: object
        massif:
          $ref: '#/components/schemas/Massif'
        organization:
          $ref: '#/components/schemas/Organization'

    Organization:
      type: object
      properties:
        id:
          type: integer
          format: int64
        author:
          $ref: '#/components/schemas/Caver'
        reviewer:
          $ref: '#/components/schemas/Caver'
        name:
          type: 'string'
        address:
          type: 'string'
        city:
          type: 'string'
        village:
          type: 'string'
        postalCode:
          type: 'string'
        county:
          type: 'string'
        region:
          type: 'string'
        country:
          type: 'string'
        mail:
          type: 'string'
        yearBirth:
          type: 'string'
        dateInscription:
          type: 'string'
        dateReviewed:
          type: 'string'
        latitude:
          type: number
        longitude:
          type: number
        customMessage:
          type: 'string'
        pictureFileName:
          type: 'string'
        isOfficialPartner:
          type: 'boolean'
        cavers:
          type: array
          items:
            $ref: '#/components/schemas/Caver'
        exploredCaves:
          type: array
          items:
            $ref: '#/components/schemas/Cave'
        partneredCaves:
          type: array
          items:
            $ref: '#/components/schemas/Cave'

    Point:
      type: object

    Rigging:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        dateInscription:
          type: string
        dateReviewed:
          type: string
        author:
          $ref: '#/components/schemas/Caver'
        reviewer:
          $ref: '#/components/schemas/Caver'
        relevance:
          type: number
        title:
          type: string
        obstacles:
          type: string
        ropes:
          type: string
        anchors:
          type: string
        observations:
          type: string
        exit:
          $ref: '#/components/schemas/Entrance'
        point:
          $ref: '#/components/schemas/Point'
        language:
          type: string

    Region:
      properties:
        id:
          type: integer
        name:
          type: string
        code:
          type: string
        isDeprecated:
          type: boolean
        country:
          type: string

    Search:
      properties:
        results:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Entrance'
              - $ref: '#/components/schemas/Massif'
              - $ref: '#/components/schemas/Organization'

    Quicksearch-type:
      type: string
      enum:
        - cavers
        - documents
        - entrances
        - grottos
        - massifs

    Search-type:
      type: string
      enum:
        - cavers
        - documents
        - document-collections
        - document-issues
        - entrances
        - grottos
        - massifs
