########### PRODUCTION LOGSTASH CONF ############
# Create the Elasticsearch indexes and load     #
# data from MySQL database.                     #
#################################################

input {
  jdbc { 
    jdbc_connection_string => "${JDBC_MYSQL}"
    # The user we wish to execute our statement as
    jdbc_user => "${JDBC_USER}"
    jdbc_password => "${JDBC_PASSWORD}"
    # The path to our downloaded jdbc driver
    jdbc_driver_library => "/config-dir/mysql-connector-java-5.1.47/mysql-connector-java-5.1.47-bin.jar"
    jdbc_driver_class => "com.mysql.jdbc.Driver"
    # our query
    statement => "
      SELECT 
        bbs.ArticleTitle as 'bbs title',
        bbs.ArticleYear as 'bbs year',
        bbs.cAuthorsFull as 'bbs authors',
        bbs.Abstract as 'bbs abstract',
        bbs.XrefNumeriqueFinal as 'bbs numericalRef',
        bbs.ref_ as 'bbs ref',
        bbs.ChapterCode as 'bbs chapterCode',
        bbs.publication_export as 'bbs publication',
        GROUP_CONCAT(bbs_chapter.Texte_chapitre_anglais, ' / ', bbs_chapter.Texte_chapitre_francais) as 'bbs theme',
        GROUP_CONCAT(bbs_chapter.texte_matiere_anglais, ' / ', bbs_chapter.texte_matiere_francais) as 'bbs subtheme',
        bbs_geo.Country as 'bbs country',
        bbs_geo.Code as 'bbs country code',
        bbs_lib.nom_centre as 'bbs lib'
      FROM t_bbs bbs
      LEFT JOIN t_bbs_chapter bbs_chapter ON bbs_chapter.code_matiere = bbs.ChapterCode
      LEFT JOIN t_bbs_geo bbs_geo ON bbs_geo.Code = bbs.CountryCode
      LEFT JOIN t_bbs_lib bbs_lib ON bbs_lib.code_centre = bbs.LibraryCode
      GROUP BY bbs.XrefNumeriqueFinal
    "
    type => "bbs"
  }
  jdbc { 
    jdbc_connection_string => "${JDBC_MYSQL}"
    # The user we wish to execute our statement as
    jdbc_user => "${JDBC_USER}"
    jdbc_password => "${JDBC_PASSWORD}"
    # The path to our downloaded jdbc driver
    jdbc_driver_library => "/config-dir/mysql-connector-java-5.1.47/mysql-connector-java-5.1.47-bin.jar"
    jdbc_driver_class => "com.mysql.jdbc.Driver"
    # our query
    statement => "
      SELECT 
        entry.*, 
        GROUP_CONCAT(description.Title, description.Body) as 'descriptions',
        
        cave.name as 'cave name',
        cave.length as 'cave length',
        cave.depth as 'cave depth',
        cave.is_diving as 'cave is diving',
        cave.temperature as 'cave temperature',

        AVG(comments.aestheticism) as 'aestheticism',
        AVG(comments.caving) as 'caving',
        AVG(comments.approach) as 'approach',

        GROUP_CONCAT(DISTINCT massif.name) as 'massif name',
        
        GROUP_CONCAT(rigging.Title, rigging.Observations, rigging.Obstacles) as 'riggings',
        GROUP_CONCAT(location.Body) as 'location',
        GROUP_CONCAT(bibliography.Body) as 'bibliography',

        t_type.en_type as 'underground type'

      FROM t_entry entry

      LEFT JOIN t_cave cave ON cave.id = entry.Id_cave

      LEFT JOIN j_entry_description jed ON jed.id_entry = entry.id
      LEFT JOIN t_description description ON description.id = jed.id_description

      LEFT JOIN j_entry_rigging jer ON jer.id_entry = entry.id
      LEFT JOIN t_rigging rigging ON rigging.id = jer.id_rigging

      LEFT JOIN t_location location ON location.id_entry = entry.id
      
      LEFT JOIN t_bibliography bibliography ON bibliography.id_entry = entry.id

      LEFT JOIN t_comment comments ON comments.id_entry = entry.id

      LEFT JOIN t_massif massif ON ST_Contains(massif.geog_polygon, ST_MakePoint(cave.longitude, cave.latitude) )

      LEFT JOIN t_type ON t_type.id = entry.id_type
      WHERE entry.is_public='YES'
      GROUP BY entry.id
    "
    type => "entry"
  }
  jdbc { 
    jdbc_connection_string => "${JDBC_MYSQL}"
    # The user we wish to execute our statement as
    jdbc_user => "${JDBC_USER}"
    jdbc_password => "${JDBC_PASSWORD}"
    # The path to our downloaded jdbc driver
    jdbc_driver_library => "/config-dir/mysql-connector-java-5.1.47/mysql-connector-java-5.1.47-bin.jar"
    jdbc_driver_class => "com.mysql.jdbc.Driver"
    # our query
    statement => "
      SELECT 
        massif.*, 

        GROUP_CONCAT(DISTINCT cave.name) as 'caves names',

        GROUP_CONCAT(entry.name) as 'entries names',
        GROUP_CONCAT(DISTINCT entry.city) as 'entries cities',
        GROUP_CONCAT(DISTINCT entry.county) as 'entries counties',
        GROUP_CONCAT(DISTINCT entry.country) as 'entries countries',
        GROUP_CONCAT(DISTINCT entry.city) as 'entries cities',
        GROUP_CONCAT(DISTINCT entry.region) as 'entries regions'

      FROM t_massif massif
      LEFT JOIN t_cave cave ON ST_Contains(massif.geog_polygon, ST_MakePoint(cave.longitude, cave.latitude) )
      LEFT JOIN t_entry entry ON entry.id_cave = cave.id
      GROUP BY massif.id
    "
    type => "massif"
  }
  jdbc { 
    jdbc_connection_string => "${JDBC_MYSQL}"
    # The user we wish to execute our statement as
    jdbc_user => "${JDBC_USER}"
    jdbc_password => "${JDBC_PASSWORD}"
    # The path to our downloaded jdbc driver
    jdbc_driver_library => "/config-dir/mysql-connector-java-5.1.47/mysql-connector-java-5.1.47-bin.jar"
    jdbc_driver_class => "com.mysql.jdbc.Driver"
    # our query
    statement => "
      SELECT 
        grotto.*,
        GROUP_CONCAT(caver.Nickname) as 'cavers names',
        COUNT(caver.id) as 'number of cavers'
      FROM t_grotto grotto
      LEFT JOIN j_grotto_caver jgc ON jgc.id_grotto = grotto.id
      LEFT JOIN t_caver caver ON caver.id = jgc.id_caver
      GROUP BY grotto.id
    "
    type => "grotto"
  }
}
output {
  # debugging purpose
  # stdout { codec => json_lines }
  if [type] == "entry" {
    elasticsearch {
      hosts => "${ES_HOSTS}"
      index => "entries-index"
      document_type => "data"
      action => "update"
      document_id => "%{id}"
      doc_as_upsert => true
    }
  }

  if [type] == "massif" {
    elasticsearch {
      hosts => "${ES_HOSTS}"
      index => "massifs-index"
      document_type => "data"
      action => "update"
      document_id => "%{id}"
      doc_as_upsert => true
    }
  }

  if [type] == "grotto" {
    elasticsearch {
      hosts => "${ES_HOSTS}"
      index => "grottos-index"
      document_type => "data"
      action => "update"
      document_id => "%{id}"
      doc_as_upsert => true
    }
  }

  if [type] == "bbs" {
    elasticsearch {
      hosts => "${ES_HOSTS}"
      index => "bbs-index"
      document_type => "data"
      action => "update"
      document_id => "%{bbs numericalref}"
      doc_as_upsert => true
    }
  }
}